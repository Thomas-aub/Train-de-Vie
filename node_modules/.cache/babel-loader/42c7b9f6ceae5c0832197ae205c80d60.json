{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported');\n  }\n\n  var clientNonce = crypto.randomBytes(18).toString('base64');\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce: clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse'\n  };\n}\n\nfunction continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse');\n  }\n\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string');\n  }\n\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string');\n  }\n\n  var sv = parseServerFirstMessage(serverData);\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce');\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short');\n  }\n\n  var saltBytes = Buffer.from(sv.salt, 'base64');\n  var saltedPassword = Hi(password, saltBytes, sv.iteration);\n  var clientKey = hmacSha256(saltedPassword, 'Client Key');\n  var storedKey = sha256(clientKey);\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce;\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration;\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce;\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof;\n  var clientSignature = hmacSha256(storedKey, authMessage);\n  var clientProofBytes = xorBuffers(clientKey, clientSignature);\n  var clientProof = clientProofBytes.toString('base64');\n  var serverKey = hmacSha256(saltedPassword, 'Server Key');\n  var serverSignatureBytes = hmacSha256(serverKey, authMessage);\n  session.message = 'SASLResponse';\n  session.serverSignature = serverSignatureBytes.toString('base64');\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof;\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse');\n  }\n\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string');\n  }\n\n  var _parseServerFinalMess = parseServerFinalMessage(serverData),\n      serverSignature = _parseServerFinalMess.serverSignature;\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match');\n  }\n}\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\n\n\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string');\n  }\n\n  return text.split('').map(function (_, i) {\n    return text.charCodeAt(i);\n  }).every(function (c) {\n    return c >= 0x21 && c <= 0x2b || c >= 0x2d && c <= 0x7e;\n  });\n}\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\n\n\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text);\n}\n\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string');\n  }\n\n  return new Map(text.split(',').map(function (attrValue) {\n    if (!/^.=/.test(attrValue)) {\n      throw new Error('SASL: Invalid attribute pair entry');\n    }\n\n    var name = attrValue[0];\n    var value = attrValue.substring(2);\n    return [name, value];\n  }));\n}\n\nfunction parseServerFirstMessage(data) {\n  var attrPairs = parseAttributePairs(data);\n  var nonce = attrPairs.get('r');\n\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing');\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters');\n  }\n\n  var salt = attrPairs.get('s');\n\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing');\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64');\n  }\n\n  var iterationText = attrPairs.get('i');\n\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing');\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count');\n  }\n\n  var iteration = parseInt(iterationText, 10);\n  return {\n    nonce: nonce,\n    salt: salt,\n    iteration: iteration\n  };\n}\n\nfunction parseServerFinalMessage(serverData) {\n  var attrPairs = parseAttributePairs(serverData);\n  var serverSignature = attrPairs.get('v');\n\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing');\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64');\n  }\n\n  return {\n    serverSignature: serverSignature\n  };\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer');\n  }\n\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer');\n  }\n\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match');\n  }\n\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty');\n  }\n\n  return Buffer.from(a.map(function (_, i) {\n    return a[i] ^ b[i];\n  }));\n}\n\nfunction sha256(text) {\n  return crypto.createHash('sha256').update(text).digest();\n}\n\nfunction hmacSha256(key, msg) {\n  return crypto.createHmac('sha256', key).update(msg).digest();\n}\n\nfunction Hi(password, saltBytes, iterations) {\n  var ui1 = hmacSha256(password, Buffer.concat([saltBytes, Buffer.from([0, 0, 0, 1])]));\n  var ui = ui1;\n\n  for (var i = 0; i < iterations - 1; i++) {\n    ui1 = hmacSha256(password, ui1);\n    ui = xorBuffers(ui, ui1);\n  }\n\n  return ui;\n}\n\nmodule.exports = {\n  startSession: startSession,\n  continueSession: continueSession,\n  finalizeSession: finalizeSession\n};","map":{"version":3,"names":["crypto","require","startSession","mechanisms","indexOf","Error","clientNonce","randomBytes","toString","mechanism","response","message","continueSession","session","password","serverData","sv","parseServerFirstMessage","nonce","startsWith","length","saltBytes","Buffer","from","salt","saltedPassword","Hi","iteration","clientKey","hmacSha256","storedKey","sha256","clientFirstMessageBare","serverFirstMessage","clientFinalMessageWithoutProof","authMessage","clientSignature","clientProofBytes","xorBuffers","clientProof","serverKey","serverSignatureBytes","serverSignature","finalizeSession","parseServerFinalMessage","isPrintableChars","text","TypeError","split","map","_","i","charCodeAt","every","c","isBase64","test","parseAttributePairs","Map","attrValue","name","value","substring","data","attrPairs","get","iterationText","parseInt","a","b","isBuffer","createHash","update","digest","key","msg","createHmac","iterations","ui1","concat","ui","module","exports"],"sources":["C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/pg/lib/sasl.js"],"sourcesContent":["'use strict'\nconst crypto = require('crypto')\n\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported')\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64')\n\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse',\n  }\n}\n\nfunction continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse')\n  }\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string')\n  }\n\n  const sv = parseServerFirstMessage(serverData)\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce')\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short')\n  }\n\n  var saltBytes = Buffer.from(sv.salt, 'base64')\n\n  var saltedPassword = Hi(password, saltBytes, sv.iteration)\n\n  var clientKey = hmacSha256(saltedPassword, 'Client Key')\n  var storedKey = sha256(clientKey)\n\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration\n\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce\n\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof\n\n  var clientSignature = hmacSha256(storedKey, authMessage)\n  var clientProofBytes = xorBuffers(clientKey, clientSignature)\n  var clientProof = clientProofBytes.toString('base64')\n\n  var serverKey = hmacSha256(saltedPassword, 'Server Key')\n  var serverSignatureBytes = hmacSha256(serverKey, authMessage)\n\n  session.message = 'SASLResponse'\n  session.serverSignature = serverSignatureBytes.toString('base64')\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string')\n  }\n\n  const { serverSignature } = parseServerFinalMessage(serverData)\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match')\n  }\n}\n\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string')\n  }\n  return text\n    .split('')\n    .map((_, i) => text.charCodeAt(i))\n    .every((c) => (c >= 0x21 && c <= 0x2b) || (c >= 0x2d && c <= 0x7e))\n}\n\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text)\n}\n\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string')\n  }\n\n  return new Map(\n    text.split(',').map((attrValue) => {\n      if (!/^.=/.test(attrValue)) {\n        throw new Error('SASL: Invalid attribute pair entry')\n      }\n      const name = attrValue[0]\n      const value = attrValue.substring(2)\n      return [name, value]\n    })\n  )\n}\n\nfunction parseServerFirstMessage(data) {\n  const attrPairs = parseAttributePairs(data)\n\n  const nonce = attrPairs.get('r')\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing')\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters')\n  }\n  const salt = attrPairs.get('s')\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing')\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64')\n  }\n  const iterationText = attrPairs.get('i')\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing')\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count')\n  }\n  const iteration = parseInt(iterationText, 10)\n\n  return {\n    nonce,\n    salt,\n    iteration,\n  }\n}\n\nfunction parseServerFinalMessage(serverData) {\n  const attrPairs = parseAttributePairs(serverData)\n  const serverSignature = attrPairs.get('v')\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing')\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64')\n  }\n  return {\n    serverSignature,\n  }\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer')\n  }\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer')\n  }\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match')\n  }\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty')\n  }\n  return Buffer.from(a.map((_, i) => a[i] ^ b[i]))\n}\n\nfunction sha256(text) {\n  return crypto.createHash('sha256').update(text).digest()\n}\n\nfunction hmacSha256(key, msg) {\n  return crypto.createHmac('sha256', key).update(msg).digest()\n}\n\nfunction Hi(password, saltBytes, iterations) {\n  var ui1 = hmacSha256(password, Buffer.concat([saltBytes, Buffer.from([0, 0, 0, 1])]))\n  var ui = ui1\n  for (var i = 0; i < iterations - 1; i++) {\n    ui1 = hmacSha256(password, ui1)\n    ui = xorBuffers(ui, ui1)\n  }\n\n  return ui\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}