{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar types = require('pg-types');\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/; // result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\n\nvar Result = /*#__PURE__*/function () {\n  function Result(rowMode, types) {\n    _classCallCheck(this, Result);\n\n    this.command = null;\n    this.rowCount = null;\n    this.oid = null;\n    this.rows = [];\n    this.fields = [];\n    this._parsers = undefined;\n    this._types = types;\n    this.RowCtor = null;\n    this.rowAsArray = rowMode === 'array';\n\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray;\n    }\n  } // adds a command complete message\n\n\n  _createClass(Result, [{\n    key: \"addCommandComplete\",\n    value: function addCommandComplete(msg) {\n      var match;\n\n      if (msg.text) {\n        // pure javascript\n        match = matchRegexp.exec(msg.text);\n      } else {\n        // native bindings\n        match = matchRegexp.exec(msg.command);\n      }\n\n      if (match) {\n        this.command = match[1];\n\n        if (match[3]) {\n          // COMMMAND OID ROWS\n          this.oid = parseInt(match[2], 10);\n          this.rowCount = parseInt(match[3], 10);\n        } else if (match[2]) {\n          // COMMAND ROWS\n          this.rowCount = parseInt(match[2], 10);\n        }\n      }\n    }\n  }, {\n    key: \"_parseRowAsArray\",\n    value: function _parseRowAsArray(rowData) {\n      var row = new Array(rowData.length);\n\n      for (var i = 0, len = rowData.length; i < len; i++) {\n        var rawValue = rowData[i];\n\n        if (rawValue !== null) {\n          row[i] = this._parsers[i](rawValue);\n        } else {\n          row[i] = null;\n        }\n      }\n\n      return row;\n    }\n  }, {\n    key: \"parseRow\",\n    value: function parseRow(rowData) {\n      var row = {};\n\n      for (var i = 0, len = rowData.length; i < len; i++) {\n        var rawValue = rowData[i];\n        var field = this.fields[i].name;\n\n        if (rawValue !== null) {\n          row[field] = this._parsers[i](rawValue);\n        } else {\n          row[field] = null;\n        }\n      }\n\n      return row;\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow(row) {\n      this.rows.push(row);\n    }\n  }, {\n    key: \"addFields\",\n    value: function addFields(fieldDescriptions) {\n      // clears field definitions\n      // multiple query statements in 1 action can result in multiple sets\n      // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n      // you need to reset the fields\n      this.fields = fieldDescriptions;\n\n      if (this.fields.length) {\n        this._parsers = new Array(fieldDescriptions.length);\n      }\n\n      for (var i = 0; i < fieldDescriptions.length; i++) {\n        var desc = fieldDescriptions[i];\n\n        if (this._types) {\n          this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n        } else {\n          this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n        }\n      }\n    }\n  }]);\n\n  return Result;\n}();\n\nmodule.exports = Result;","map":{"version":3,"names":["types","require","matchRegexp","Result","rowMode","command","rowCount","oid","rows","fields","_parsers","undefined","_types","RowCtor","rowAsArray","parseRow","_parseRowAsArray","msg","match","text","exec","parseInt","rowData","row","Array","length","i","len","rawValue","field","name","push","fieldDescriptions","desc","getTypeParser","dataTypeID","format","module","exports"],"sources":["C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/pg/lib/result.js"],"sourcesContent":["'use strict'\n\nvar types = require('pg-types')\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null\n    this.rowCount = null\n    this.oid = null\n    this.rows = []\n    this.fields = []\n    this._parsers = undefined\n    this._types = types\n    this.RowCtor = null\n    this.rowAsArray = rowMode === 'array'\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray\n    }\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    var match\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text)\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command)\n    }\n    if (match) {\n      this.command = match[1]\n      if (match[3]) {\n        // COMMMAND OID ROWS\n        this.oid = parseInt(match[2], 10)\n        this.rowCount = parseInt(match[3], 10)\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10)\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length)\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue)\n      } else {\n        row[i] = null\n      }\n    }\n    return row\n  }\n\n  parseRow(rowData) {\n    var row = {}\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      var field = this.fields[i].name\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue)\n      } else {\n        row[field] = null\n      }\n    }\n    return row\n  }\n\n  addRow(row) {\n    this.rows.push(row)\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length)\n    }\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i]\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      }\n    }\n  }\n}\n\nmodule.exports = Result\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}