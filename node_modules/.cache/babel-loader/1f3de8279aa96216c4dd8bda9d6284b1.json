{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = void 0;\n\nvar messages_1 = require(\"./messages\");\n\nvar buffer_reader_1 = require(\"./buffer-reader\");\n\nvar assert_1 = __importDefault(require(\"assert\")); // every message is prefixed with a single bye\n\n\nvar CODE_LENGTH = 1; // every message has an int32 length which includes itself but does\n// NOT include the code in the length\n\nvar LEN_LENGTH = 4;\nvar HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;\nvar emptyBuffer = Buffer.allocUnsafe(0);\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(opts) {\n    _classCallCheck(this, Parser);\n\n    this.buffer = emptyBuffer;\n    this.bufferLength = 0;\n    this.bufferOffset = 0;\n    this.reader = new buffer_reader_1.BufferReader();\n\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'binary') {\n      throw new Error('Binary mode not supported yet');\n    }\n\n    this.mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'text';\n  }\n\n  _createClass(Parser, [{\n    key: \"parse\",\n    value: function parse(buffer, callback) {\n      this.mergeBuffer(buffer);\n      var bufferFullLength = this.bufferOffset + this.bufferLength;\n      var offset = this.bufferOffset;\n\n      while (offset + HEADER_LENGTH <= bufferFullLength) {\n        // code is 1 byte long - it identifies the message type\n        var code = this.buffer[offset]; // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n\n        var length = this.buffer.readUInt32BE(offset + CODE_LENGTH);\n        var fullMessageLength = CODE_LENGTH + length;\n\n        if (fullMessageLength + offset <= bufferFullLength) {\n          var message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);\n          callback(message);\n          offset += fullMessageLength;\n        } else {\n          break;\n        }\n      }\n\n      if (offset === bufferFullLength) {\n        // No more use for the buffer\n        this.buffer = emptyBuffer;\n        this.bufferLength = 0;\n        this.bufferOffset = 0;\n      } else {\n        // Adjust the cursors of remainingBuffer\n        this.bufferLength = bufferFullLength - offset;\n        this.bufferOffset = offset;\n      }\n    }\n  }, {\n    key: \"mergeBuffer\",\n    value: function mergeBuffer(buffer) {\n      if (this.bufferLength > 0) {\n        var newLength = this.bufferLength + buffer.byteLength;\n        var newFullLength = newLength + this.bufferOffset;\n\n        if (newFullLength > this.buffer.byteLength) {\n          // We can't concat the new buffer with the remaining one\n          var newBuffer;\n\n          if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n            // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n            newBuffer = this.buffer;\n          } else {\n            // Allocate a new larger buffer\n            var newBufferLength = this.buffer.byteLength * 2;\n\n            while (newLength >= newBufferLength) {\n              newBufferLength *= 2;\n            }\n\n            newBuffer = Buffer.allocUnsafe(newBufferLength);\n          } // Move the remaining buffer to the new one\n\n\n          this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);\n          this.buffer = newBuffer;\n          this.bufferOffset = 0;\n        } // Concat the new buffer with the remaining one\n\n\n        buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);\n        this.bufferLength = newLength;\n      } else {\n        this.buffer = buffer;\n        this.bufferOffset = 0;\n        this.bufferLength = buffer.byteLength;\n      }\n    }\n  }, {\n    key: \"handlePacket\",\n    value: function handlePacket(offset, code, length, bytes) {\n      switch (code) {\n        case 50\n        /* BindComplete */\n        :\n          return messages_1.bindComplete;\n\n        case 49\n        /* ParseComplete */\n        :\n          return messages_1.parseComplete;\n\n        case 51\n        /* CloseComplete */\n        :\n          return messages_1.closeComplete;\n\n        case 110\n        /* NoData */\n        :\n          return messages_1.noData;\n\n        case 115\n        /* PortalSuspended */\n        :\n          return messages_1.portalSuspended;\n\n        case 99\n        /* CopyDone */\n        :\n          return messages_1.copyDone;\n\n        case 87\n        /* ReplicationStart */\n        :\n          return messages_1.replicationStart;\n\n        case 73\n        /* EmptyQuery */\n        :\n          return messages_1.emptyQuery;\n\n        case 68\n        /* DataRow */\n        :\n          return this.parseDataRowMessage(offset, length, bytes);\n\n        case 67\n        /* CommandComplete */\n        :\n          return this.parseCommandCompleteMessage(offset, length, bytes);\n\n        case 90\n        /* ReadyForQuery */\n        :\n          return this.parseReadyForQueryMessage(offset, length, bytes);\n\n        case 65\n        /* NotificationResponse */\n        :\n          return this.parseNotificationMessage(offset, length, bytes);\n\n        case 82\n        /* AuthenticationResponse */\n        :\n          return this.parseAuthenticationResponse(offset, length, bytes);\n\n        case 83\n        /* ParameterStatus */\n        :\n          return this.parseParameterStatusMessage(offset, length, bytes);\n\n        case 75\n        /* BackendKeyData */\n        :\n          return this.parseBackendKeyData(offset, length, bytes);\n\n        case 69\n        /* ErrorMessage */\n        :\n          return this.parseErrorMessage(offset, length, bytes, 'error');\n\n        case 78\n        /* NoticeMessage */\n        :\n          return this.parseErrorMessage(offset, length, bytes, 'notice');\n\n        case 84\n        /* RowDescriptionMessage */\n        :\n          return this.parseRowDescriptionMessage(offset, length, bytes);\n\n        case 116\n        /* ParameterDescriptionMessage */\n        :\n          return this.parseParameterDescriptionMessage(offset, length, bytes);\n\n        case 71\n        /* CopyIn */\n        :\n          return this.parseCopyInMessage(offset, length, bytes);\n\n        case 72\n        /* CopyOut */\n        :\n          return this.parseCopyOutMessage(offset, length, bytes);\n\n        case 100\n        /* CopyData */\n        :\n          return this.parseCopyData(offset, length, bytes);\n\n        default:\n          assert_1.default.fail(\"unknown message code: \".concat(code.toString(16)));\n      }\n    }\n  }, {\n    key: \"parseReadyForQueryMessage\",\n    value: function parseReadyForQueryMessage(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var status = this.reader.string(1);\n      return new messages_1.ReadyForQueryMessage(length, status);\n    }\n  }, {\n    key: \"parseCommandCompleteMessage\",\n    value: function parseCommandCompleteMessage(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var text = this.reader.cstring();\n      return new messages_1.CommandCompleteMessage(length, text);\n    }\n  }, {\n    key: \"parseCopyData\",\n    value: function parseCopyData(offset, length, bytes) {\n      var chunk = bytes.slice(offset, offset + (length - 4));\n      return new messages_1.CopyDataMessage(length, chunk);\n    }\n  }, {\n    key: \"parseCopyInMessage\",\n    value: function parseCopyInMessage(offset, length, bytes) {\n      return this.parseCopyMessage(offset, length, bytes, 'copyInResponse');\n    }\n  }, {\n    key: \"parseCopyOutMessage\",\n    value: function parseCopyOutMessage(offset, length, bytes) {\n      return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse');\n    }\n  }, {\n    key: \"parseCopyMessage\",\n    value: function parseCopyMessage(offset, length, bytes, messageName) {\n      this.reader.setBuffer(offset, bytes);\n      var isBinary = this.reader.byte() !== 0;\n      var columnCount = this.reader.int16();\n      var message = new messages_1.CopyResponse(length, messageName, isBinary, columnCount);\n\n      for (var i = 0; i < columnCount; i++) {\n        message.columnTypes[i] = this.reader.int16();\n      }\n\n      return message;\n    }\n  }, {\n    key: \"parseNotificationMessage\",\n    value: function parseNotificationMessage(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var processId = this.reader.int32();\n      var channel = this.reader.cstring();\n      var payload = this.reader.cstring();\n      return new messages_1.NotificationResponseMessage(length, processId, channel, payload);\n    }\n  }, {\n    key: \"parseRowDescriptionMessage\",\n    value: function parseRowDescriptionMessage(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var fieldCount = this.reader.int16();\n      var message = new messages_1.RowDescriptionMessage(length, fieldCount);\n\n      for (var i = 0; i < fieldCount; i++) {\n        message.fields[i] = this.parseField();\n      }\n\n      return message;\n    }\n  }, {\n    key: \"parseField\",\n    value: function parseField() {\n      var name = this.reader.cstring();\n      var tableID = this.reader.int32();\n      var columnID = this.reader.int16();\n      var dataTypeID = this.reader.int32();\n      var dataTypeSize = this.reader.int16();\n      var dataTypeModifier = this.reader.int32();\n      var mode = this.reader.int16() === 0 ? 'text' : 'binary';\n      return new messages_1.Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);\n    }\n  }, {\n    key: \"parseParameterDescriptionMessage\",\n    value: function parseParameterDescriptionMessage(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var parameterCount = this.reader.int16();\n      var message = new messages_1.ParameterDescriptionMessage(length, parameterCount);\n\n      for (var i = 0; i < parameterCount; i++) {\n        message.dataTypeIDs[i] = this.reader.int32();\n      }\n\n      return message;\n    }\n  }, {\n    key: \"parseDataRowMessage\",\n    value: function parseDataRowMessage(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var fieldCount = this.reader.int16();\n      var fields = new Array(fieldCount);\n\n      for (var i = 0; i < fieldCount; i++) {\n        var len = this.reader.int32(); // a -1 for length means the value of the field is null\n\n        fields[i] = len === -1 ? null : this.reader.string(len);\n      }\n\n      return new messages_1.DataRowMessage(length, fields);\n    }\n  }, {\n    key: \"parseParameterStatusMessage\",\n    value: function parseParameterStatusMessage(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var name = this.reader.cstring();\n      var value = this.reader.cstring();\n      return new messages_1.ParameterStatusMessage(length, name, value);\n    }\n  }, {\n    key: \"parseBackendKeyData\",\n    value: function parseBackendKeyData(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var processID = this.reader.int32();\n      var secretKey = this.reader.int32();\n      return new messages_1.BackendKeyDataMessage(length, processID, secretKey);\n    }\n  }, {\n    key: \"parseAuthenticationResponse\",\n    value: function parseAuthenticationResponse(offset, length, bytes) {\n      this.reader.setBuffer(offset, bytes);\n      var code = this.reader.int32(); // TODO(bmc): maybe better types here\n\n      var message = {\n        name: 'authenticationOk',\n        length: length\n      };\n\n      switch (code) {\n        case 0:\n          // AuthenticationOk\n          break;\n\n        case 3:\n          // AuthenticationCleartextPassword\n          if (message.length === 8) {\n            message.name = 'authenticationCleartextPassword';\n          }\n\n          break;\n\n        case 5:\n          // AuthenticationMD5Password\n          if (message.length === 12) {\n            message.name = 'authenticationMD5Password';\n            var salt = this.reader.bytes(4);\n            return new messages_1.AuthenticationMD5Password(length, salt);\n          }\n\n          break;\n\n        case 10:\n          // AuthenticationSASL\n          message.name = 'authenticationSASL';\n          message.mechanisms = [];\n          var mechanism;\n\n          do {\n            mechanism = this.reader.cstring();\n\n            if (mechanism) {\n              message.mechanisms.push(mechanism);\n            }\n          } while (mechanism);\n\n          break;\n\n        case 11:\n          // AuthenticationSASLContinue\n          message.name = 'authenticationSASLContinue';\n          message.data = this.reader.string(length - 8);\n          break;\n\n        case 12:\n          // AuthenticationSASLFinal\n          message.name = 'authenticationSASLFinal';\n          message.data = this.reader.string(length - 8);\n          break;\n\n        default:\n          throw new Error('Unknown authenticationOk message type ' + code);\n      }\n\n      return message;\n    }\n  }, {\n    key: \"parseErrorMessage\",\n    value: function parseErrorMessage(offset, length, bytes, name) {\n      this.reader.setBuffer(offset, bytes);\n      var fields = {};\n      var fieldType = this.reader.string(1);\n\n      while (fieldType !== '\\0') {\n        fields[fieldType] = this.reader.cstring();\n        fieldType = this.reader.string(1);\n      }\n\n      var messageValue = fields.M;\n      var message = name === 'notice' ? new messages_1.NoticeMessage(length, messageValue) : new messages_1.DatabaseError(messageValue, length, name);\n      message.severity = fields.S;\n      message.code = fields.C;\n      message.detail = fields.D;\n      message.hint = fields.H;\n      message.position = fields.P;\n      message.internalPosition = fields.p;\n      message.internalQuery = fields.q;\n      message.where = fields.W;\n      message.schema = fields.s;\n      message.table = fields.t;\n      message.column = fields.c;\n      message.dataType = fields.d;\n      message.constraint = fields.n;\n      message.file = fields.F;\n      message.line = fields.L;\n      message.routine = fields.R;\n      return message;\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports.Parser = Parser;","map":{"version":3,"mappings":"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","names":["CODE_LENGTH","LEN_LENGTH","HEADER_LENGTH","emptyBuffer","Buffer","allocUnsafe","Parser","opts","buffer_reader_1","mode","Error","buffer","callback","mergeBuffer","bufferFullLength","bufferOffset","bufferLength","offset","code","length","readUInt32BE","fullMessageLength","message","handlePacket","newLength","byteLength","newFullLength","newBuffer","newBufferLength","copy","bytes","messages_1","parseDataRowMessage","parseCommandCompleteMessage","parseReadyForQueryMessage","parseNotificationMessage","parseAuthenticationResponse","parseParameterStatusMessage","parseBackendKeyData","parseErrorMessage","parseRowDescriptionMessage","parseParameterDescriptionMessage","parseCopyInMessage","parseCopyOutMessage","parseCopyData","assert_1","fail","toString","reader","setBuffer","status","string","text","cstring","chunk","slice","parseCopyMessage","messageName","isBinary","byte","columnCount","int16","i","columnTypes","processId","int32","channel","payload","fieldCount","fields","parseField","name","tableID","columnID","dataTypeID","dataTypeSize","dataTypeModifier","parameterCount","dataTypeIDs","Array","len","value","processID","secretKey","salt","mechanisms","mechanism","push","data","fieldType","messageValue","M","severity","S","C","detail","D","hint","H","position","P","internalPosition","p","internalQuery","q","where","W","schema","s","table","t","column","c","dataType","d","constraint","n","file","F","line","L","routine","R","exports"],"sourceRoot":"","sources":["../src/parser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}