{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar utils = require('./utils');\n\nvar sasl = require('./sasl');\n\nvar pgPass = require('pgpass');\n\nvar TypeOverrides = require('./type-overrides');\n\nvar ConnectionParameters = require('./connection-parameters');\n\nvar Query = require('./query');\n\nvar defaults = require('./defaults');\n\nvar Connection = require('./connection');\n\nvar Client = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Client, _EventEmitter);\n\n  var _super = _createSuper(Client);\n\n  function Client(config) {\n    var _this;\n\n    _classCallCheck(this, Client);\n\n    _this = _super.call(this);\n    _this.connectionParameters = new ConnectionParameters(config);\n    _this.user = _this.connectionParameters.user;\n    _this.database = _this.connectionParameters.database;\n    _this.port = _this.connectionParameters.port;\n    _this.host = _this.connectionParameters.host; // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n\n    Object.defineProperty(_assertThisInitialized(_this), 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: _this.connectionParameters.password\n    });\n    _this.replication = _this.connectionParameters.replication;\n    var c = config || {};\n    _this._Promise = c.Promise || global.Promise;\n    _this._types = new TypeOverrides(c.types);\n    _this._ending = false;\n    _this._connecting = false;\n    _this._connected = false;\n    _this._connectionError = false;\n    _this._queryable = true;\n    _this.connection = c.connection || new Connection({\n      stream: c.stream,\n      ssl: _this.connectionParameters.ssl,\n      keepAlive: c.keepAlive || false,\n      keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n      encoding: _this.connectionParameters.client_encoding || 'utf8'\n    });\n    _this.queryQueue = [];\n    _this.binary = c.binary || defaults.binary;\n    _this.processID = null;\n    _this.secretKey = null;\n    _this.ssl = _this.connectionParameters.ssl || false; // As with Password, make SSL->Key (the private key) non-enumerable.\n    // It won't show up in stack traces\n    // or if the client is console.logged\n\n    if (_this.ssl && _this.ssl.key) {\n      Object.defineProperty(_this.ssl, 'key', {\n        enumerable: false\n      });\n    }\n\n    _this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0;\n    return _this;\n  }\n\n  _createClass(Client, [{\n    key: \"_errorAllQueries\",\n    value: function _errorAllQueries(err) {\n      var _this2 = this;\n\n      var enqueueError = function enqueueError(query) {\n        process.nextTick(function () {\n          query.handleError(err, _this2.connection);\n        });\n      };\n\n      if (this.activeQuery) {\n        enqueueError(this.activeQuery);\n        this.activeQuery = null;\n      }\n\n      this.queryQueue.forEach(enqueueError);\n      this.queryQueue.length = 0;\n    }\n  }, {\n    key: \"_connect\",\n    value: function _connect(callback) {\n      var _this3 = this;\n\n      var self = this;\n      var con = this.connection;\n      this._connectionCallback = callback;\n\n      if (this._connecting || this._connected) {\n        var err = new Error('Client has already been connected. You cannot reuse a client.');\n        process.nextTick(function () {\n          callback(err);\n        });\n        return;\n      }\n\n      this._connecting = true;\n      this.connectionTimeoutHandle;\n\n      if (this._connectionTimeoutMillis > 0) {\n        this.connectionTimeoutHandle = setTimeout(function () {\n          con._ending = true;\n          con.stream.destroy(new Error('timeout expired'));\n        }, this._connectionTimeoutMillis);\n      }\n\n      if (this.host && this.host.indexOf('/') === 0) {\n        con.connect(this.host + '/.s.PGSQL.' + this.port);\n      } else {\n        con.connect(this.port, this.host);\n      } // once connection is established send startup message\n\n\n      con.on('connect', function () {\n        if (self.ssl) {\n          con.requestSsl();\n        } else {\n          con.startup(self.getStartupConf());\n        }\n      });\n      con.on('sslconnect', function () {\n        con.startup(self.getStartupConf());\n      });\n\n      this._attachListeners(con);\n\n      con.once('end', function () {\n        var error = _this3._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly');\n        clearTimeout(_this3.connectionTimeoutHandle);\n\n        _this3._errorAllQueries(error);\n\n        if (!_this3._ending) {\n          // if the connection is ended without us calling .end()\n          // on this client then we have an unexpected disconnection\n          // treat this as an error unless we've already emitted an error\n          // during connection.\n          if (_this3._connecting && !_this3._connectionError) {\n            if (_this3._connectionCallback) {\n              _this3._connectionCallback(error);\n            } else {\n              _this3._handleErrorEvent(error);\n            }\n          } else if (!_this3._connectionError) {\n            _this3._handleErrorEvent(error);\n          }\n        }\n\n        process.nextTick(function () {\n          _this3.emit('end');\n        });\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(callback) {\n      var _this4 = this;\n\n      if (callback) {\n        this._connect(callback);\n\n        return;\n      }\n\n      return new this._Promise(function (resolve, reject) {\n        _this4._connect(function (error) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_attachListeners\",\n    value: function _attachListeners(con) {\n      // password request handling\n      con.on('authenticationCleartextPassword', this._handleAuthCleartextPassword.bind(this)); // password request handling\n\n      con.on('authenticationMD5Password', this._handleAuthMD5Password.bind(this)); // password request handling (SASL)\n\n      con.on('authenticationSASL', this._handleAuthSASL.bind(this));\n      con.on('authenticationSASLContinue', this._handleAuthSASLContinue.bind(this));\n      con.on('authenticationSASLFinal', this._handleAuthSASLFinal.bind(this));\n      con.on('backendKeyData', this._handleBackendKeyData.bind(this));\n      con.on('error', this._handleErrorEvent.bind(this));\n      con.on('errorMessage', this._handleErrorMessage.bind(this));\n      con.on('readyForQuery', this._handleReadyForQuery.bind(this));\n      con.on('notice', this._handleNotice.bind(this));\n      con.on('rowDescription', this._handleRowDescription.bind(this));\n      con.on('dataRow', this._handleDataRow.bind(this));\n      con.on('portalSuspended', this._handlePortalSuspended.bind(this));\n      con.on('emptyQuery', this._handleEmptyQuery.bind(this));\n      con.on('commandComplete', this._handleCommandComplete.bind(this));\n      con.on('parseComplete', this._handleParseComplete.bind(this));\n      con.on('copyInResponse', this._handleCopyInResponse.bind(this));\n      con.on('copyData', this._handleCopyData.bind(this));\n      con.on('notification', this._handleNotification.bind(this));\n    } // TODO(bmc): deprecate pgpass \"built in\" integration since this.password can be a function\n    // it can be supplied by the user if required - this is a breaking change!\n\n  }, {\n    key: \"_checkPgPass\",\n    value: function _checkPgPass(cb) {\n      var _this5 = this;\n\n      var con = this.connection;\n\n      if (typeof this.password === 'function') {\n        this._Promise.resolve().then(function () {\n          return _this5.password();\n        }).then(function (pass) {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'));\n              return;\n            }\n\n            _this5.connectionParameters.password = _this5.password = pass;\n          } else {\n            _this5.connectionParameters.password = _this5.password = null;\n          }\n\n          cb();\n        }).catch(function (err) {\n          con.emit('error', err);\n        });\n      } else if (this.password !== null) {\n        cb();\n      } else {\n        pgPass(this.connectionParameters, function (pass) {\n          if (undefined !== pass) {\n            _this5.connectionParameters.password = _this5.password = pass;\n          }\n\n          cb();\n        });\n      }\n    }\n  }, {\n    key: \"_handleAuthCleartextPassword\",\n    value: function _handleAuthCleartextPassword(msg) {\n      var _this6 = this;\n\n      this._checkPgPass(function () {\n        _this6.connection.password(_this6.password);\n      });\n    }\n  }, {\n    key: \"_handleAuthMD5Password\",\n    value: function _handleAuthMD5Password(msg) {\n      var _this7 = this;\n\n      this._checkPgPass(function () {\n        var hashedPassword = utils.postgresMd5PasswordHash(_this7.user, _this7.password, msg.salt);\n\n        _this7.connection.password(hashedPassword);\n      });\n    }\n  }, {\n    key: \"_handleAuthSASL\",\n    value: function _handleAuthSASL(msg) {\n      var _this8 = this;\n\n      this._checkPgPass(function () {\n        _this8.saslSession = sasl.startSession(msg.mechanisms);\n\n        _this8.connection.sendSASLInitialResponseMessage(_this8.saslSession.mechanism, _this8.saslSession.response);\n      });\n    }\n  }, {\n    key: \"_handleAuthSASLContinue\",\n    value: function _handleAuthSASLContinue(msg) {\n      sasl.continueSession(this.saslSession, this.password, msg.data);\n      this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);\n    }\n  }, {\n    key: \"_handleAuthSASLFinal\",\n    value: function _handleAuthSASLFinal(msg) {\n      sasl.finalizeSession(this.saslSession, msg.data);\n      this.saslSession = null;\n    }\n  }, {\n    key: \"_handleBackendKeyData\",\n    value: function _handleBackendKeyData(msg) {\n      this.processID = msg.processID;\n      this.secretKey = msg.secretKey;\n    }\n  }, {\n    key: \"_handleReadyForQuery\",\n    value: function _handleReadyForQuery(msg) {\n      if (this._connecting) {\n        this._connecting = false;\n        this._connected = true;\n        clearTimeout(this.connectionTimeoutHandle); // process possible callback argument to Client#connect\n\n        if (this._connectionCallback) {\n          this._connectionCallback(null, this); // remove callback for proper error handling\n          // after the connect event\n\n\n          this._connectionCallback = null;\n        }\n\n        this.emit('connect');\n      }\n\n      var activeQuery = this.activeQuery;\n      this.activeQuery = null;\n      this.readyForQuery = true;\n\n      if (activeQuery) {\n        activeQuery.handleReadyForQuery(this.connection);\n      }\n\n      this._pulseQueryQueue();\n    } // if we receieve an error event or error message\n    // during the connection process we handle it here\n\n  }, {\n    key: \"_handleErrorWhileConnecting\",\n    value: function _handleErrorWhileConnecting(err) {\n      if (this._connectionError) {\n        // TODO(bmc): this is swallowing errors - we shouldn't do this\n        return;\n      }\n\n      this._connectionError = true;\n      clearTimeout(this.connectionTimeoutHandle);\n\n      if (this._connectionCallback) {\n        return this._connectionCallback(err);\n      }\n\n      this.emit('error', err);\n    } // if we're connected and we receive an error event from the connection\n    // this means the socket is dead - do a hard abort of all queries and emit\n    // the socket error on the client as well\n\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(err) {\n      if (this._connecting) {\n        return this._handleErrorWhileConnecting(err);\n      }\n\n      this._queryable = false;\n\n      this._errorAllQueries(err);\n\n      this.emit('error', err);\n    } // handle error messages from the postgres backend\n\n  }, {\n    key: \"_handleErrorMessage\",\n    value: function _handleErrorMessage(msg) {\n      if (this._connecting) {\n        return this._handleErrorWhileConnecting(msg);\n      }\n\n      var activeQuery = this.activeQuery;\n\n      if (!activeQuery) {\n        this._handleErrorEvent(msg);\n\n        return;\n      }\n\n      this.activeQuery = null;\n      activeQuery.handleError(msg, this.connection);\n    }\n  }, {\n    key: \"_handleRowDescription\",\n    value: function _handleRowDescription(msg) {\n      // delegate rowDescription to active query\n      this.activeQuery.handleRowDescription(msg);\n    }\n  }, {\n    key: \"_handleDataRow\",\n    value: function _handleDataRow(msg) {\n      // delegate dataRow to active query\n      this.activeQuery.handleDataRow(msg);\n    }\n  }, {\n    key: \"_handlePortalSuspended\",\n    value: function _handlePortalSuspended(msg) {\n      // delegate portalSuspended to active query\n      this.activeQuery.handlePortalSuspended(this.connection);\n    }\n  }, {\n    key: \"_handleEmptyQuery\",\n    value: function _handleEmptyQuery(msg) {\n      // delegate emptyQuery to active query\n      this.activeQuery.handleEmptyQuery(this.connection);\n    }\n  }, {\n    key: \"_handleCommandComplete\",\n    value: function _handleCommandComplete(msg) {\n      // delegate commandComplete to active query\n      this.activeQuery.handleCommandComplete(msg, this.connection);\n    }\n  }, {\n    key: \"_handleParseComplete\",\n    value: function _handleParseComplete(msg) {\n      // if a prepared statement has a name and properly parses\n      // we track that its already been executed so we don't parse\n      // it again on the same client\n      if (this.activeQuery.name) {\n        this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text;\n      }\n    }\n  }, {\n    key: \"_handleCopyInResponse\",\n    value: function _handleCopyInResponse(msg) {\n      this.activeQuery.handleCopyInResponse(this.connection);\n    }\n  }, {\n    key: \"_handleCopyData\",\n    value: function _handleCopyData(msg) {\n      this.activeQuery.handleCopyData(msg, this.connection);\n    }\n  }, {\n    key: \"_handleNotification\",\n    value: function _handleNotification(msg) {\n      this.emit('notification', msg);\n    }\n  }, {\n    key: \"_handleNotice\",\n    value: function _handleNotice(msg) {\n      this.emit('notice', msg);\n    }\n  }, {\n    key: \"getStartupConf\",\n    value: function getStartupConf() {\n      var params = this.connectionParameters;\n      var data = {\n        user: params.user,\n        database: params.database\n      };\n      var appName = params.application_name || params.fallback_application_name;\n\n      if (appName) {\n        data.application_name = appName;\n      }\n\n      if (params.replication) {\n        data.replication = '' + params.replication;\n      }\n\n      if (params.statement_timeout) {\n        data.statement_timeout = String(parseInt(params.statement_timeout, 10));\n      }\n\n      if (params.lock_timeout) {\n        data.lock_timeout = String(parseInt(params.lock_timeout, 10));\n      }\n\n      if (params.idle_in_transaction_session_timeout) {\n        data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10));\n      }\n\n      if (params.options) {\n        data.options = params.options;\n      }\n\n      return data;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(client, query) {\n      if (client.activeQuery === query) {\n        var con = this.connection;\n\n        if (this.host && this.host.indexOf('/') === 0) {\n          con.connect(this.host + '/.s.PGSQL.' + this.port);\n        } else {\n          con.connect(this.port, this.host);\n        } // once connection is established send cancel message\n\n\n        con.on('connect', function () {\n          con.cancel(client.processID, client.secretKey);\n        });\n      } else if (client.queryQueue.indexOf(query) !== -1) {\n        client.queryQueue.splice(client.queryQueue.indexOf(query), 1);\n      }\n    }\n  }, {\n    key: \"setTypeParser\",\n    value: function setTypeParser(oid, format, parseFn) {\n      return this._types.setTypeParser(oid, format, parseFn);\n    }\n  }, {\n    key: \"getTypeParser\",\n    value: function getTypeParser(oid, format) {\n      return this._types.getTypeParser(oid, format);\n    } // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n\n  }, {\n    key: \"escapeIdentifier\",\n    value: function escapeIdentifier(str) {\n      return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n    } // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n\n  }, {\n    key: \"escapeLiteral\",\n    value: function escapeLiteral(str) {\n      var hasBackslash = false;\n      var escaped = \"'\";\n\n      for (var i = 0; i < str.length; i++) {\n        var c = str[i];\n\n        if (c === \"'\") {\n          escaped += c + c;\n        } else if (c === '\\\\') {\n          escaped += c + c;\n          hasBackslash = true;\n        } else {\n          escaped += c;\n        }\n      }\n\n      escaped += \"'\";\n\n      if (hasBackslash === true) {\n        escaped = ' E' + escaped;\n      }\n\n      return escaped;\n    }\n  }, {\n    key: \"_pulseQueryQueue\",\n    value: function _pulseQueryQueue() {\n      var _this9 = this;\n\n      if (this.readyForQuery === true) {\n        this.activeQuery = this.queryQueue.shift();\n\n        if (this.activeQuery) {\n          this.readyForQuery = false;\n          this.hasExecuted = true;\n          var queryError = this.activeQuery.submit(this.connection);\n\n          if (queryError) {\n            process.nextTick(function () {\n              _this9.activeQuery.handleError(queryError, _this9.connection);\n\n              _this9.readyForQuery = true;\n\n              _this9._pulseQueryQueue();\n            });\n          }\n        } else if (this.hasExecuted) {\n          this.activeQuery = null;\n          this.emit('drain');\n        }\n      }\n    }\n  }, {\n    key: \"query\",\n    value: function query(config, values, callback) {\n      var _this10 = this;\n\n      // can take in strings, config object or query object\n      var query;\n      var result;\n      var readTimeout;\n      var readTimeoutTimer;\n      var queryCallback;\n\n      if (config === null || config === undefined) {\n        throw new TypeError('Client was passed a null or undefined query');\n      } else if (typeof config.submit === 'function') {\n        readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n        result = query = config;\n\n        if (typeof values === 'function') {\n          query.callback = query.callback || values;\n        }\n      } else {\n        readTimeout = this.connectionParameters.query_timeout;\n        query = new Query(config, values, callback);\n\n        if (!query.callback) {\n          result = new this._Promise(function (resolve, reject) {\n            query.callback = function (err, res) {\n              return err ? reject(err) : resolve(res);\n            };\n          });\n        }\n      }\n\n      if (readTimeout) {\n        queryCallback = query.callback;\n        readTimeoutTimer = setTimeout(function () {\n          var error = new Error('Query read timeout');\n          process.nextTick(function () {\n            query.handleError(error, _this10.connection);\n          });\n          queryCallback(error); // we already returned an error,\n          // just do nothing if query completes\n\n          query.callback = function () {}; // Remove from queue\n\n\n          var index = _this10.queryQueue.indexOf(query);\n\n          if (index > -1) {\n            _this10.queryQueue.splice(index, 1);\n          }\n\n          _this10._pulseQueryQueue();\n        }, readTimeout);\n\n        query.callback = function (err, res) {\n          clearTimeout(readTimeoutTimer);\n          queryCallback(err, res);\n        };\n      }\n\n      if (this.binary && !query.binary) {\n        query.binary = true;\n      }\n\n      if (query._result && !query._result._types) {\n        query._result._types = this._types;\n      }\n\n      if (!this._queryable) {\n        process.nextTick(function () {\n          query.handleError(new Error('Client has encountered a connection error and is not queryable'), _this10.connection);\n        });\n        return result;\n      }\n\n      if (this._ending) {\n        process.nextTick(function () {\n          query.handleError(new Error('Client was closed and is not queryable'), _this10.connection);\n        });\n        return result;\n      }\n\n      this.queryQueue.push(query);\n\n      this._pulseQueryQueue();\n\n      return result;\n    }\n  }, {\n    key: \"ref\",\n    value: function ref() {\n      this.connection.ref();\n    }\n  }, {\n    key: \"unref\",\n    value: function unref() {\n      this.connection.unref();\n    }\n  }, {\n    key: \"end\",\n    value: function end(cb) {\n      var _this11 = this;\n\n      this._ending = true; // if we have never connected, then end is a noop, callback immediately\n\n      if (!this.connection._connecting) {\n        if (cb) {\n          cb();\n        } else {\n          return this._Promise.resolve();\n        }\n      }\n\n      if (this.activeQuery || !this._queryable) {\n        // if we have an active query we need to force a disconnect\n        // on the socket - otherwise a hung query could block end forever\n        this.connection.stream.destroy();\n      } else {\n        this.connection.end();\n      }\n\n      if (cb) {\n        this.connection.once('end', cb);\n      } else {\n        return new this._Promise(function (resolve) {\n          _this11.connection.once('end', resolve);\n        });\n      }\n    }\n  }]);\n\n  return Client;\n}(EventEmitter); // expose a Query constructor\n\n\nClient.Query = Query;\nmodule.exports = Client;","map":{"version":3,"names":["EventEmitter","require","util","utils","sasl","pgPass","TypeOverrides","ConnectionParameters","Query","defaults","Connection","Client","config","connectionParameters","user","database","port","host","Object","defineProperty","configurable","enumerable","writable","value","password","replication","c","_Promise","Promise","global","_types","types","_ending","_connecting","_connected","_connectionError","_queryable","connection","stream","ssl","keepAlive","keepAliveInitialDelayMillis","encoding","client_encoding","queryQueue","binary","processID","secretKey","key","_connectionTimeoutMillis","connectionTimeoutMillis","err","enqueueError","query","process","nextTick","handleError","activeQuery","forEach","length","callback","self","con","_connectionCallback","Error","connectionTimeoutHandle","setTimeout","destroy","indexOf","connect","on","requestSsl","startup","getStartupConf","_attachListeners","once","error","clearTimeout","_errorAllQueries","_handleErrorEvent","emit","_connect","resolve","reject","_handleAuthCleartextPassword","bind","_handleAuthMD5Password","_handleAuthSASL","_handleAuthSASLContinue","_handleAuthSASLFinal","_handleBackendKeyData","_handleErrorMessage","_handleReadyForQuery","_handleNotice","_handleRowDescription","_handleDataRow","_handlePortalSuspended","_handleEmptyQuery","_handleCommandComplete","_handleParseComplete","_handleCopyInResponse","_handleCopyData","_handleNotification","cb","then","pass","undefined","TypeError","catch","msg","_checkPgPass","hashedPassword","postgresMd5PasswordHash","salt","saslSession","startSession","mechanisms","sendSASLInitialResponseMessage","mechanism","response","continueSession","data","sendSCRAMClientFinalMessage","finalizeSession","readyForQuery","handleReadyForQuery","_pulseQueryQueue","_handleErrorWhileConnecting","handleRowDescription","handleDataRow","handlePortalSuspended","handleEmptyQuery","handleCommandComplete","name","parsedStatements","text","handleCopyInResponse","handleCopyData","params","appName","application_name","fallback_application_name","statement_timeout","String","parseInt","lock_timeout","idle_in_transaction_session_timeout","options","client","cancel","splice","oid","format","parseFn","setTypeParser","getTypeParser","str","replace","hasBackslash","escaped","i","shift","hasExecuted","queryError","submit","values","result","readTimeout","readTimeoutTimer","queryCallback","query_timeout","res","index","_result","push","ref","unref","end","module","exports"],"sources":["C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/pg/lib/client.js"],"sourcesContent":["'use strict'\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('./utils')\nvar sasl = require('./sasl')\nvar pgPass = require('pgpass')\nvar TypeOverrides = require('./type-overrides')\n\nvar ConnectionParameters = require('./connection-parameters')\nvar Query = require('./query')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\n\nclass Client extends EventEmitter {\n  constructor(config) {\n    super()\n\n    this.connectionParameters = new ConnectionParameters(config)\n    this.user = this.connectionParameters.user\n    this.database = this.connectionParameters.database\n    this.port = this.connectionParameters.port\n    this.host = this.connectionParameters.host\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: this.connectionParameters.password,\n    })\n\n    this.replication = this.connectionParameters.replication\n\n    var c = config || {}\n\n    this._Promise = c.Promise || global.Promise\n    this._types = new TypeOverrides(c.types)\n    this._ending = false\n    this._connecting = false\n    this._connected = false\n    this._connectionError = false\n    this._queryable = true\n\n    this.connection =\n      c.connection ||\n      new Connection({\n        stream: c.stream,\n        ssl: this.connectionParameters.ssl,\n        keepAlive: c.keepAlive || false,\n        keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n        encoding: this.connectionParameters.client_encoding || 'utf8',\n      })\n    this.queryQueue = []\n    this.binary = c.binary || defaults.binary\n    this.processID = null\n    this.secretKey = null\n    this.ssl = this.connectionParameters.ssl || false\n    // As with Password, make SSL->Key (the private key) non-enumerable.\n    // It won't show up in stack traces\n    // or if the client is console.logged\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0\n  }\n\n  _errorAllQueries(err) {\n    const enqueueError = (query) => {\n      process.nextTick(() => {\n        query.handleError(err, this.connection)\n      })\n    }\n\n    if (this.activeQuery) {\n      enqueueError(this.activeQuery)\n      this.activeQuery = null\n    }\n\n    this.queryQueue.forEach(enqueueError)\n    this.queryQueue.length = 0\n  }\n\n  _connect(callback) {\n    var self = this\n    var con = this.connection\n    this._connectionCallback = callback\n\n    if (this._connecting || this._connected) {\n      const err = new Error('Client has already been connected. You cannot reuse a client.')\n      process.nextTick(() => {\n        callback(err)\n      })\n      return\n    }\n    this._connecting = true\n\n    this.connectionTimeoutHandle\n    if (this._connectionTimeoutMillis > 0) {\n      this.connectionTimeoutHandle = setTimeout(() => {\n        con._ending = true\n        con.stream.destroy(new Error('timeout expired'))\n      }, this._connectionTimeoutMillis)\n    }\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port)\n    } else {\n      con.connect(this.port, this.host)\n    }\n\n    // once connection is established send startup message\n    con.on('connect', function () {\n      if (self.ssl) {\n        con.requestSsl()\n      } else {\n        con.startup(self.getStartupConf())\n      }\n    })\n\n    con.on('sslconnect', function () {\n      con.startup(self.getStartupConf())\n    })\n\n    this._attachListeners(con)\n\n    con.once('end', () => {\n      const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly')\n\n      clearTimeout(this.connectionTimeoutHandle)\n      this._errorAllQueries(error)\n\n      if (!this._ending) {\n        // if the connection is ended without us calling .end()\n        // on this client then we have an unexpected disconnection\n        // treat this as an error unless we've already emitted an error\n        // during connection.\n        if (this._connecting && !this._connectionError) {\n          if (this._connectionCallback) {\n            this._connectionCallback(error)\n          } else {\n            this._handleErrorEvent(error)\n          }\n        } else if (!this._connectionError) {\n          this._handleErrorEvent(error)\n        }\n      }\n\n      process.nextTick(() => {\n        this.emit('end')\n      })\n    })\n  }\n\n  connect(callback) {\n    if (callback) {\n      this._connect(callback)\n      return\n    }\n\n    return new this._Promise((resolve, reject) => {\n      this._connect((error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  _attachListeners(con) {\n    // password request handling\n    con.on('authenticationCleartextPassword', this._handleAuthCleartextPassword.bind(this))\n    // password request handling\n    con.on('authenticationMD5Password', this._handleAuthMD5Password.bind(this))\n    // password request handling (SASL)\n    con.on('authenticationSASL', this._handleAuthSASL.bind(this))\n    con.on('authenticationSASLContinue', this._handleAuthSASLContinue.bind(this))\n    con.on('authenticationSASLFinal', this._handleAuthSASLFinal.bind(this))\n    con.on('backendKeyData', this._handleBackendKeyData.bind(this))\n    con.on('error', this._handleErrorEvent.bind(this))\n    con.on('errorMessage', this._handleErrorMessage.bind(this))\n    con.on('readyForQuery', this._handleReadyForQuery.bind(this))\n    con.on('notice', this._handleNotice.bind(this))\n    con.on('rowDescription', this._handleRowDescription.bind(this))\n    con.on('dataRow', this._handleDataRow.bind(this))\n    con.on('portalSuspended', this._handlePortalSuspended.bind(this))\n    con.on('emptyQuery', this._handleEmptyQuery.bind(this))\n    con.on('commandComplete', this._handleCommandComplete.bind(this))\n    con.on('parseComplete', this._handleParseComplete.bind(this))\n    con.on('copyInResponse', this._handleCopyInResponse.bind(this))\n    con.on('copyData', this._handleCopyData.bind(this))\n    con.on('notification', this._handleNotification.bind(this))\n  }\n\n  // TODO(bmc): deprecate pgpass \"built in\" integration since this.password can be a function\n  // it can be supplied by the user if required - this is a breaking change!\n  _checkPgPass(cb) {\n    const con = this.connection\n    if (typeof this.password === 'function') {\n      this._Promise\n        .resolve()\n        .then(() => this.password())\n        .then((pass) => {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'))\n              return\n            }\n            this.connectionParameters.password = this.password = pass\n          } else {\n            this.connectionParameters.password = this.password = null\n          }\n          cb()\n        })\n        .catch((err) => {\n          con.emit('error', err)\n        })\n    } else if (this.password !== null) {\n      cb()\n    } else {\n      pgPass(this.connectionParameters, (pass) => {\n        if (undefined !== pass) {\n          this.connectionParameters.password = this.password = pass\n        }\n        cb()\n      })\n    }\n  }\n\n  _handleAuthCleartextPassword(msg) {\n    this._checkPgPass(() => {\n      this.connection.password(this.password)\n    })\n  }\n\n  _handleAuthMD5Password(msg) {\n    this._checkPgPass(() => {\n      const hashedPassword = utils.postgresMd5PasswordHash(this.user, this.password, msg.salt)\n      this.connection.password(hashedPassword)\n    })\n  }\n\n  _handleAuthSASL(msg) {\n    this._checkPgPass(() => {\n      this.saslSession = sasl.startSession(msg.mechanisms)\n      this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response)\n    })\n  }\n\n  _handleAuthSASLContinue(msg) {\n    sasl.continueSession(this.saslSession, this.password, msg.data)\n    this.connection.sendSCRAMClientFinalMessage(this.saslSession.response)\n  }\n\n  _handleAuthSASLFinal(msg) {\n    sasl.finalizeSession(this.saslSession, msg.data)\n    this.saslSession = null\n  }\n\n  _handleBackendKeyData(msg) {\n    this.processID = msg.processID\n    this.secretKey = msg.secretKey\n  }\n\n  _handleReadyForQuery(msg) {\n    if (this._connecting) {\n      this._connecting = false\n      this._connected = true\n      clearTimeout(this.connectionTimeoutHandle)\n\n      // process possible callback argument to Client#connect\n      if (this._connectionCallback) {\n        this._connectionCallback(null, this)\n        // remove callback for proper error handling\n        // after the connect event\n        this._connectionCallback = null\n      }\n      this.emit('connect')\n    }\n    const { activeQuery } = this\n    this.activeQuery = null\n    this.readyForQuery = true\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(this.connection)\n    }\n    this._pulseQueryQueue()\n  }\n\n  // if we receieve an error event or error message\n  // during the connection process we handle it here\n  _handleErrorWhileConnecting(err) {\n    if (this._connectionError) {\n      // TODO(bmc): this is swallowing errors - we shouldn't do this\n      return\n    }\n    this._connectionError = true\n    clearTimeout(this.connectionTimeoutHandle)\n    if (this._connectionCallback) {\n      return this._connectionCallback(err)\n    }\n    this.emit('error', err)\n  }\n\n  // if we're connected and we receive an error event from the connection\n  // this means the socket is dead - do a hard abort of all queries and emit\n  // the socket error on the client as well\n  _handleErrorEvent(err) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(err)\n    }\n    this._queryable = false\n    this._errorAllQueries(err)\n    this.emit('error', err)\n  }\n\n  // handle error messages from the postgres backend\n  _handleErrorMessage(msg) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(msg)\n    }\n    const activeQuery = this.activeQuery\n\n    if (!activeQuery) {\n      this._handleErrorEvent(msg)\n      return\n    }\n\n    this.activeQuery = null\n    activeQuery.handleError(msg, this.connection)\n  }\n\n  _handleRowDescription(msg) {\n    // delegate rowDescription to active query\n    this.activeQuery.handleRowDescription(msg)\n  }\n\n  _handleDataRow(msg) {\n    // delegate dataRow to active query\n    this.activeQuery.handleDataRow(msg)\n  }\n\n  _handlePortalSuspended(msg) {\n    // delegate portalSuspended to active query\n    this.activeQuery.handlePortalSuspended(this.connection)\n  }\n\n  _handleEmptyQuery(msg) {\n    // delegate emptyQuery to active query\n    this.activeQuery.handleEmptyQuery(this.connection)\n  }\n\n  _handleCommandComplete(msg) {\n    // delegate commandComplete to active query\n    this.activeQuery.handleCommandComplete(msg, this.connection)\n  }\n\n  _handleParseComplete(msg) {\n    // if a prepared statement has a name and properly parses\n    // we track that its already been executed so we don't parse\n    // it again on the same client\n    if (this.activeQuery.name) {\n      this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text\n    }\n  }\n\n  _handleCopyInResponse(msg) {\n    this.activeQuery.handleCopyInResponse(this.connection)\n  }\n\n  _handleCopyData(msg) {\n    this.activeQuery.handleCopyData(msg, this.connection)\n  }\n\n  _handleNotification(msg) {\n    this.emit('notification', msg)\n  }\n\n  _handleNotice(msg) {\n    this.emit('notice', msg)\n  }\n\n  getStartupConf() {\n    var params = this.connectionParameters\n\n    var data = {\n      user: params.user,\n      database: params.database,\n    }\n\n    var appName = params.application_name || params.fallback_application_name\n    if (appName) {\n      data.application_name = appName\n    }\n    if (params.replication) {\n      data.replication = '' + params.replication\n    }\n    if (params.statement_timeout) {\n      data.statement_timeout = String(parseInt(params.statement_timeout, 10))\n    }\n    if (params.lock_timeout) {\n      data.lock_timeout = String(parseInt(params.lock_timeout, 10))\n    }\n    if (params.idle_in_transaction_session_timeout) {\n      data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10))\n    }\n    if (params.options) {\n      data.options = params.options\n    }\n\n    return data\n  }\n\n  cancel(client, query) {\n    if (client.activeQuery === query) {\n      var con = this.connection\n\n      if (this.host && this.host.indexOf('/') === 0) {\n        con.connect(this.host + '/.s.PGSQL.' + this.port)\n      } else {\n        con.connect(this.port, this.host)\n      }\n\n      // once connection is established send cancel message\n      con.on('connect', function () {\n        con.cancel(client.processID, client.secretKey)\n      })\n    } else if (client.queryQueue.indexOf(query) !== -1) {\n      client.queryQueue.splice(client.queryQueue.indexOf(query), 1)\n    }\n  }\n\n  setTypeParser(oid, format, parseFn) {\n    return this._types.setTypeParser(oid, format, parseFn)\n  }\n\n  getTypeParser(oid, format) {\n    return this._types.getTypeParser(oid, format)\n  }\n\n  // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n  escapeIdentifier(str) {\n    return '\"' + str.replace(/\"/g, '\"\"') + '\"'\n  }\n\n  // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n  escapeLiteral(str) {\n    var hasBackslash = false\n    var escaped = \"'\"\n\n    for (var i = 0; i < str.length; i++) {\n      var c = str[i]\n      if (c === \"'\") {\n        escaped += c + c\n      } else if (c === '\\\\') {\n        escaped += c + c\n        hasBackslash = true\n      } else {\n        escaped += c\n      }\n    }\n\n    escaped += \"'\"\n\n    if (hasBackslash === true) {\n      escaped = ' E' + escaped\n    }\n\n    return escaped\n  }\n\n  _pulseQueryQueue() {\n    if (this.readyForQuery === true) {\n      this.activeQuery = this.queryQueue.shift()\n      if (this.activeQuery) {\n        this.readyForQuery = false\n        this.hasExecuted = true\n\n        const queryError = this.activeQuery.submit(this.connection)\n        if (queryError) {\n          process.nextTick(() => {\n            this.activeQuery.handleError(queryError, this.connection)\n            this.readyForQuery = true\n            this._pulseQueryQueue()\n          })\n        }\n      } else if (this.hasExecuted) {\n        this.activeQuery = null\n        this.emit('drain')\n      }\n    }\n  }\n\n  query(config, values, callback) {\n    // can take in strings, config object or query object\n    var query\n    var result\n    var readTimeout\n    var readTimeoutTimer\n    var queryCallback\n\n    if (config === null || config === undefined) {\n      throw new TypeError('Client was passed a null or undefined query')\n    } else if (typeof config.submit === 'function') {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      result = query = config\n      if (typeof values === 'function') {\n        query.callback = query.callback || values\n      }\n    } else {\n      readTimeout = this.connectionParameters.query_timeout\n      query = new Query(config, values, callback)\n      if (!query.callback) {\n        result = new this._Promise((resolve, reject) => {\n          query.callback = (err, res) => (err ? reject(err) : resolve(res))\n        })\n      }\n    }\n\n    if (readTimeout) {\n      queryCallback = query.callback\n\n      readTimeoutTimer = setTimeout(() => {\n        var error = new Error('Query read timeout')\n\n        process.nextTick(() => {\n          query.handleError(error, this.connection)\n        })\n\n        queryCallback(error)\n\n        // we already returned an error,\n        // just do nothing if query completes\n        query.callback = () => {}\n\n        // Remove from queue\n        var index = this.queryQueue.indexOf(query)\n        if (index > -1) {\n          this.queryQueue.splice(index, 1)\n        }\n\n        this._pulseQueryQueue()\n      }, readTimeout)\n\n      query.callback = (err, res) => {\n        clearTimeout(readTimeoutTimer)\n        queryCallback(err, res)\n      }\n    }\n\n    if (this.binary && !query.binary) {\n      query.binary = true\n    }\n\n    if (query._result && !query._result._types) {\n      query._result._types = this._types\n    }\n\n    if (!this._queryable) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    if (this._ending) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client was closed and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    this.queryQueue.push(query)\n    this._pulseQueryQueue()\n    return result\n  }\n\n  ref() {\n    this.connection.ref()\n  }\n\n  unref() {\n    this.connection.unref()\n  }\n\n  end(cb) {\n    this._ending = true\n\n    // if we have never connected, then end is a noop, callback immediately\n    if (!this.connection._connecting) {\n      if (cb) {\n        cb()\n      } else {\n        return this._Promise.resolve()\n      }\n    }\n\n    if (this.activeQuery || !this._queryable) {\n      // if we have an active query we need to force a disconnect\n      // on the socket - otherwise a hung query could block end forever\n      this.connection.stream.destroy()\n    } else {\n      this.connection.end()\n    }\n\n    if (cb) {\n      this.connection.once('end', cb)\n    } else {\n      return new this._Promise((resolve) => {\n        this.connection.once('end', resolve)\n      })\n    }\n  }\n}\n\n// expose a Query constructor\nClient.Query = Query\n\nmodule.exports = Client\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}