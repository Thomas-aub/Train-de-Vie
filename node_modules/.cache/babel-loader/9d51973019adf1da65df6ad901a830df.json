{"ast":null,"code":"\"use strict\"; //binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nvar _classCallCheck = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/thomas/Desktop/projet info/projet-rc1/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Writer = void 0;\n\nvar Writer = /*#__PURE__*/function () {\n  function Writer() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;\n\n    _classCallCheck(this, Writer);\n\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(size);\n  }\n\n  _createClass(Writer, [{\n    key: \"ensure\",\n    value: function ensure(size) {\n      var remaining = this.buffer.length - this.offset;\n\n      if (remaining < size) {\n        var oldBuffer = this.buffer; // exponential growth factor of around ~ 1.5\n        // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n\n        var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n        this.buffer = Buffer.allocUnsafe(newSize);\n        oldBuffer.copy(this.buffer);\n      }\n    }\n  }, {\n    key: \"addInt32\",\n    value: function addInt32(num) {\n      this.ensure(4);\n      this.buffer[this.offset++] = num >>> 24 & 0xff;\n      this.buffer[this.offset++] = num >>> 16 & 0xff;\n      this.buffer[this.offset++] = num >>> 8 & 0xff;\n      this.buffer[this.offset++] = num >>> 0 & 0xff;\n      return this;\n    }\n  }, {\n    key: \"addInt16\",\n    value: function addInt16(num) {\n      this.ensure(2);\n      this.buffer[this.offset++] = num >>> 8 & 0xff;\n      this.buffer[this.offset++] = num >>> 0 & 0xff;\n      return this;\n    }\n  }, {\n    key: \"addCString\",\n    value: function addCString(string) {\n      if (!string) {\n        this.ensure(1);\n      } else {\n        var len = Buffer.byteLength(string);\n        this.ensure(len + 1); // +1 for null terminator\n\n        this.buffer.write(string, this.offset, 'utf-8');\n        this.offset += len;\n      }\n\n      this.buffer[this.offset++] = 0; // null terminator\n\n      return this;\n    }\n  }, {\n    key: \"addString\",\n    value: function addString() {\n      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var len = Buffer.byteLength(string);\n      this.ensure(len);\n      this.buffer.write(string, this.offset);\n      this.offset += len;\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(otherBuffer) {\n      this.ensure(otherBuffer.length);\n      otherBuffer.copy(this.buffer, this.offset);\n      this.offset += otherBuffer.length;\n      return this;\n    }\n  }, {\n    key: \"join\",\n    value: function join(code) {\n      if (code) {\n        this.buffer[this.headerPosition] = code; //length is everything in this packet minus the code\n\n        var length = this.offset - (this.headerPosition + 1);\n        this.buffer.writeInt32BE(length, this.headerPosition + 1);\n      }\n\n      return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush(code) {\n      var result = this.join(code);\n      this.offset = 5;\n      this.headerPosition = 0;\n      this.buffer = Buffer.allocUnsafe(this.size);\n      return result;\n    }\n  }]);\n\n  return Writer;\n}();\n\nexports.Writer = Writer;","map":{"version":3,"mappings":"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","names":["Writer","size","buffer","Buffer","allocUnsafe","remaining","length","offset","oldBuffer","newSize","copy","num","ensure","string","len","byteLength","write","otherBuffer","code","headerPosition","writeInt32BE","slice","result","join","exports"],"sourceRoot":"","sources":["../src/buffer-writer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}